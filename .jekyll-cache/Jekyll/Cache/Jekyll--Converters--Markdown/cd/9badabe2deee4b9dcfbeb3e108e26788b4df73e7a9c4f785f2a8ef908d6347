I"ӥ<blockquote>
  <p>感觉PHP很难有进步了，停留在这个阶段太久了。不想继续下去。
于是，开始学习Java。
2019-02-24</p>
</blockquote>

<h2 id="scannerrandomarraylist-类">Scanner，Random，ArrayList 类</h2>

<hr />

<p><b>Java有类似namespace的东西。不同类包含在不同结构下。平时的int,string等都处于 <code class="highlighter-rouge">java.lang</code> ，如果使用的话不用引用，直接使用即可。</b>
<br />&lt;/br&gt;
而这次讲的这三个类处于 <code class="highlighter-rouge">java.util</code> 下，所以，我们需要引用</p>

<p><code class="highlighter-rouge">import java.util.Scanner</code></p>

<h4 id="scanner类">Scanner类</h4>

<hr />

<p>Scanner类是用来录入键盘输入的类。类似于c的小黑框print;</p>

<p>使用：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre>//引用
import java.util.Scanner;

//创建对象
Scanner sc = new Scanner(System.in);

//使用
int num = sc.nextInt();
//字符串为： String chars = sc.nextLine();

</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="random">Random</h4>

<hr />

<p>Random是用来生成随机数字的类。</p>

<p>使用：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>import java.util.Random;

Random r = new Random();

//生成0~10的随机整数
int num = r.nextInt(10);

</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="arraylist">ArrayList</h4>

<hr />

<p>ArrayLisy是用来产生一个不定大小的数组，它的长度可变。</p>

<p>使用：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre>import java.util.ArrayList;

ArratList&lt;String&gt; arr = new ArrayList&lt;&gt;();
//&lt;&gt; 尖括号内不能填基本类型，必须填基本类型包装类

String a = "刘备";
String b = "曹操";
String c = "孙权";

//添加
arr.add(a);
arr.add(b);
arr.add(c);

//删除
arr.add(0);//刘备删去

//获得
String d = arr.get(1);//曹操

//数组长度
int size = arr.size();//2

</pre></td></tr></tbody></table></code></pre></div></div>
<p><img class="shadow" src="/img/in-post/java/baseClass.png" /></p>

<h2 id="stringstaticarraymath">String,static,Array,Math</h2>

<hr />

<h4 id="string">String</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre>String a = "Hello";
String b = "world";

//判断两个字符串是否相等(bool)
a.equals(b); //false

//判断两个字符串是否相等——忽略大小写(bool)
a.equalsIgnoreCase(b);

//长度
a.length();

//拼接
a.concat("!!!");//Hello!!!

//获取指定索引处字符
a.charAt(0);//H

//indexof(获取索引)，substring(截取字符串)

//toCharArray()——返回数组，replace()——替换

</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="继承superthis抽象类">继承，super，this，抽象类</h2>

<hr />

<h4 id="继承">继承</h4>

<hr />

<h4 id="superthis">super，this</h4>

<hr />

<p><code class="highlighter-rouge">super</code>指向父类，父类成员，父类方法。
<code class="highlighter-rouge">this</code>指向本类。</p>

<h4 id="抽象类-abstract">抽象类 abstract</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>public abstract class Animal(){
	public abstact void run();
	抽象方法只包含一个方法名，没有方法体
}
</pre></td></tr></tbody></table></code></pre></div></div>

<p><b>父类的抽象方法子类必须重写</b></p>

<h2 id="接口多态">接口，多态</h2>

<hr />

<h4 id="接口">接口</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre>public interface Api(){
	public abstract void run();

	public default void eat(){
		System.out.println("default类子类可以重写，可以不写。实现时直接实现：new Cat().eat();")
	}

	//简写
	void drink();
}

class Cat implements Api(){
	public void run(){
		
	}
}

</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>注意接口的语法。接口可以联系案例，笔记本USB接口，鼠标，键盘。</strong></p>

<hr />

<h4 id="多态">多态</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre>Fu zi = new Zi();
Fu nv = new Nv();
zi.name();//小明
nv.name();//小红

if(zi instanceof Zi){
	System.out println("儿子的类");
}else if(nv instance of Nv){
	System.out println("儿子的类");
}
</pre></td></tr></tbody></table></code></pre></div></div>

<hr />

<h2 id="final内部类">final,内部类</h2>

<hr />

<h4 id="final">final</h4>

<p><strong>final即不可更改。</strong></p>

<hr />

<h4 id="内部类">内部类</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre>public class One(){
	class Two(){
		public void sout(){
			System.out println("内部类方法")
		}
	}

}

public class Test(){
	public static void main(String[] args){
		One one = new One();
		Two two = one.new Two();

		two.sout();//输出：内部类方法
	}
}
</pre></td></tr></tbody></table></code></pre></div></div>

<hr />

<h4 id="匿名类">匿名类</h4>

<blockquote>
  <p>匿名类的前提是要继承一个父类或者接口</p>
</blockquote>

<hr />

<h2 id="引用类型用法总结">引用类型用法总结</h2>

<h4 id="class作为成员变量">class作为成员变量</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre>class Role(){
	int name;
	int blood;

	//class作为成员类
	Weapon wp;//武器类
	Armour am;//盔甲类

}

class Weapon(){
	int name;
	int hurt;
}

class Armour(){
	int name;
	int protect;
}
</pre></td></tr></tbody></table></code></pre></div></div>
<hr />

<h4 id="interface作为成员变量">interface作为成员变量</h4>

<hr />

<p><strong>一个有趣的案例</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
</pre></td><td class="rouge-code"><pre><span class="kn">package</span> <span class="nc">Weapon</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">blood</span><span class="o">=</span><span class="mi">100</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">protect</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">hurt</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">User</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

	<span class="c1">//class作为成员变量</span>
    <span class="nc">Weapon</span> <span class="n">wp</span><span class="o">;</span>
    <span class="nc">Armour</span> <span class="n">am</span><span class="o">;</span>

    <span class="c1">//装备武器</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setWp</span><span class="o">(</span><span class="nc">Weapon</span> <span class="n">wp</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">wp</span> <span class="o">=</span> <span class="n">wp</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">hurt</span> <span class="o">+=</span> <span class="n">wp</span><span class="o">.</span><span class="na">hurt</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">//装备盔甲</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAm</span><span class="o">(</span><span class="nc">Armour</span> <span class="n">am</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">am</span> <span class="o">=</span> <span class="n">am</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">protect</span> <span class="o">+=</span><span class="n">am</span><span class="o">.</span><span class="na">protect</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">blood</span> <span class="o">+=</span><span class="n">am</span><span class="o">.</span><span class="na">protect</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">show</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span><span class="o">+</span><span class="s">"使用"</span><span class="o">+</span><span class="n">wp</span><span class="o">.</span><span class="na">name</span><span class="o">+</span><span class="s">"造成了"</span><span class="o">+</span><span class="n">hurt</span><span class="o">+</span><span class="s">"，他的防御是"</span><span class="o">+</span><span class="n">protect</span><span class="o">+</span><span class="s">",他的血量是"</span><span class="o">+</span><span class="n">blood</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>


<span class="c1">//武器类</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Weapon</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">hurt</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Weapon</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span><span class="kt">int</span> <span class="n">hurt</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">hurt</span> <span class="o">=</span> <span class="n">hurt</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c1">//盔甲类</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Armour</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">protect</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Armour</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span><span class="kt">int</span> <span class="n">protect</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">protect</span> <span class="o">=</span> <span class="n">protect</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">User</span> <span class="n">solider</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="s">"普通战士"</span><span class="o">);</span>

        <span class="nc">Weapon</span> <span class="n">wp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Weapon</span><span class="o">(</span><span class="s">"青龙偃月刀"</span><span class="o">,</span><span class="mi">100</span><span class="o">);</span>
        <span class="nc">Armour</span> <span class="n">am</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Armour</span><span class="o">(</span><span class="s">"青铜战甲"</span><span class="o">,</span><span class="mi">50</span><span class="o">);</span>

		<span class="c1">//装备</span>
        <span class="n">solider</span><span class="o">.</span><span class="na">setWp</span><span class="o">(</span><span class="n">wp</span><span class="o">);</span>
        <span class="n">solider</span><span class="o">.</span><span class="na">setAm</span><span class="o">(</span><span class="n">am</span><span class="o">);</span>

        <span class="n">solider</span><span class="o">.</span><span class="na">show</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>


</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="常用api">常用API</h2>

<h4 id="currenttimemillis">currentTimeMillis</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>//返回当前毫秒数
long now = System.currentTimeMillsis();
</pre></td></tr></tbody></table></code></pre></div></div>

<hr />

<h4 id="arraycopy">arraycopy()</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="c1">//arraycopy(源数组,源数组起始位置,目标数组,目标数组起始位置,复制长度)</span>

<span class="kt">int</span><span class="o">[]</span> <span class="n">src</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">];</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">dest</span><span class="o">=</span> <span class="o">[</span><span class="mi">5</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">7</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">9</span><span class="o">];</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"复制前:"</span><span class="o">+</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">dest</span><span class="o">));</span><span class="c1">//此处又有一个知识点Arrays.toString()</span>
<span class="c1">//[5,6,7,8,9]</span>

<span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">src</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">dest</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"复制后:"</span><span class="o">+</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">dest</span><span class="o">));</span>
<span class="c1">//[1,2,3,8,9]</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<hr />

<h4 id="calendar类">Calendar类</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.Calendar</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CalendarUtil</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        
        <span class="c1">// 创建Calendar对象</span>
        <span class="nc">Calendar</span> <span class="n">cal</span> <span class="o">=</span> <span class="nc">Calendar</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
        
        <span class="c1">// 设置年 </span>
        <span class="kt">int</span> <span class="n">year</span> <span class="o">=</span> <span class="n">cal</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="nc">Calendar</span><span class="o">.</span><span class="na">YEAR</span><span class="o">);</span>
        
        <span class="c1">// 设置月</span>
        <span class="kt">int</span> <span class="n">month</span> <span class="o">=</span> <span class="n">cal</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="nc">Calendar</span><span class="o">.</span><span class="na">MONTH</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
        
        <span class="c1">// 设置日</span>
        <span class="kt">int</span> <span class="n">dayOfMonth</span> <span class="o">=</span> <span class="n">cal</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="nc">Calendar</span><span class="o">.</span><span class="na">DAY_OF_MONTH</span><span class="o">);</span>
        
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">year</span> <span class="o">+</span> <span class="s">"年"</span> <span class="o">+</span> <span class="n">month</span> <span class="o">+</span> <span class="s">"月"</span> <span class="o">+</span> <span class="n">dayOfMonth</span> <span class="o">+</span> <span class="s">"日"</span><span class="o">);</span>
        <span class="c1">//2019-2-26</span>
    <span class="o">}</span>    
<span class="o">}</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<hr />

<h4 id="stringbuilder">StringBuilder</h4>

<ul>
  <li>普通String
```java
//普通的String每次存储都会另外存储
String a = “Hello”;
a += “world”;</li>
</ul>

<p>System.out.println(“Helloworld”);
//内存中存储了，”Hello”,”world”,”Helloworld” 三个字符串，占用内存</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre>
- StringBuilder类
```java
//StringBuilder类会形成一个缓存区
StringBuilder builder = new StringBuilder("Hello");

//append()可接受各种类型的参数
builder.append(",world,").append(true).append(100);

System.out.println(builder);
//Hello,world,ture100

</pre></td></tr></tbody></table></code></pre></div></div>

<hr />

<h4 id="包装类">包装类</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="c1">//自动装箱</span>
<span class="nc">Integer</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span><span class="c1">//Interger i = Interger.valueOf(4); i为一个对象</span>

<span class="c1">//自动拆箱</span>
<span class="n">i</span> <span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="o">;</span><span class="c1">//等号右边：将i对象转成基本数值(自动拆箱) i.intValue() + 5;</span>

<span class="c1">//加法运算完成后，再次装箱，把基本数值转成对象。 </span>
</pre></td></tr></tbody></table></code></pre></div></div>

<hr />

<h4 id="基本类型与字符串之间的转换">基本类型与字符串之间的转换</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="c1">//以int为例</span>
<span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="s">"100"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="集合和数组">集合和数组</h2>

<p><strong>直接看案例——斗地主</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Poker</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">//创建总牌</span>
        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">pokerBox</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="c1">//数字集合</span>
        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">number</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="c1">//四个图案</span>
        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">pic</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

        <span class="n">pic</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"♣"</span><span class="o">);</span>
        <span class="n">pic</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"♦"</span><span class="o">);</span>
        <span class="n">pic</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"♥"</span><span class="o">);</span>
        <span class="n">pic</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"♠"</span><span class="o">);</span>

        <span class="c1">//数字</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span><span class="mi">11</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">number</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="s">""</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">number</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"J"</span><span class="o">);</span>
        <span class="n">number</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Q"</span><span class="o">);</span>
        <span class="n">number</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"K"</span><span class="o">);</span>

        <span class="c1">//拼接图案和数字</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">a</span> <span class="o">:</span> <span class="n">pic</span><span class="o">){</span>
            <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">b</span> <span class="o">:</span> <span class="n">number</span><span class="o">){</span>
                <span class="n">pokerBox</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">pokerBox</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"小王"</span><span class="o">);</span>
        <span class="n">pokerBox</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"大王"</span><span class="o">);</span>

        <span class="c1">//打乱顺序</span>
        <span class="nc">Collections</span><span class="o">.</span><span class="na">shuffle</span><span class="o">(</span><span class="n">pokerBox</span><span class="o">);</span>
        <span class="cm">/*
        Collections.addAll(list, 20, 10, 100); //向list数组插入这三个数据
        Collections.shuffle(list);//打乱数组
        Collections.sort(list);//排序

         */</span>

        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">dipai</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">one</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">two</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">three</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

        <span class="c1">//发牌</span>
        <span class="n">dipai</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">pokerBox</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
        <span class="n">dipai</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">pokerBox</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
        <span class="n">dipai</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">pokerBox</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">3</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">pokerBox</span><span class="o">.</span><span class="na">size</span><span class="o">()-</span><span class="mi">2</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">one</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">pokerBox</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
            <span class="n">two</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">pokerBox</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">));</span>
            <span class="n">three</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">pokerBox</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="o">));</span>
            <span class="n">i</span> <span class="o">+=</span><span class="mi">2</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">one</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">two</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">three</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">dipai</span><span class="o">);</span>

    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="异常">异常</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">com.sun.deploy.association.RegisterFailedException</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Throw</span> <span class="o">{</span>

    <span class="kd">static</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">name</span> <span class="o">=</span> <span class="o">{</span><span class="s">"张三"</span><span class="o">,</span><span class="s">"李四"</span><span class="o">,</span><span class="s">"王五"</span><span class="o">};</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">RegisterFailedException</span> <span class="o">{</span>

        <span class="nc">Scanner</span> <span class="n">n</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"输入姓名注册"</span><span class="o">);</span>

        <span class="nc">String</span> <span class="n">my</span> <span class="o">=</span> <span class="n">n</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
        <span class="n">check</span><span class="o">(</span><span class="n">my</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">check</span><span class="o">(</span><span class="nc">String</span> <span class="n">names</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">RegisterFailedException</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">x</span> <span class="o">:</span> <span class="n">name</span><span class="o">){</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">names</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">x</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">RegisterFailedException</span><span class="o">(</span><span class="s">"用户名已注册"</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="多线程">多线程</h2>

<p>多线程有两种写法：</p>

<ul>
  <li>Thread类</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="rouge-code"><pre><span class="c1">//第一种，通过Thread</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Mythreads</span> <span class="kd">extends</span> <span class="nc">Thread</span><span class="o">{</span>
        <span class="c1">//run方法为默认执行方法</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(){</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"run"</span><span class="o">+</span><span class="n">i</span><span class="o">+</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="c1">//进程休息1秒再执行</span>
                    <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Threads</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">//创建了两个线程</span>
        <span class="nc">Mythreads</span> <span class="n">ci</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Mythreads</span><span class="o">();</span>
        <span class="nc">Mythreads</span> <span class="n">cis</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Mythreads</span><span class="o">();</span>

        <span class="n">ci</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="n">cis</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"main"</span><span class="o">+</span><span class="n">i</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>Runnable接口
```java</li>
</ul>

<p>//第二种，通过Runnable接口
public class MyRunnable implements Runnable(){
	//重写run方法
	public void run(){
		System.out.println(“run”+i+Thread.currentThread().getName());
	}
}</p>

<p>public class Demo(){
    public static void main(String[] args) {
    	//创建自定义对象
    	MyRunnable run = new MyRunnable();</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre>	//创建进程对象
	Thread td = new Thread(run);

	//开启多进程
	td.start();

	/*
	采用匿名对象
	new Thread(new Runnable(){
		public void run(){
			System.out.println("run方法")
		}
	}).start();
	*/   	

    for (int i = 0; i &lt; 10; i++) {
        System.out.println("main"+i);
    }
}	 }
</pre></td></tr></tbody></table></code></pre></div></div>

<p>```</p>

<blockquote>
  <p>第一种Thread方法是继承，不灵活(只能继承一个)。
而使用Runnable就灵活的多了，因为它是使用接口，降低耦合性</p>
</blockquote>

<p><img src="http://ww1.sinaimg.cn/large/006Sc6e5ly1g4r21oak2nj31r1big1ky.jpg" alt="Java知识点汇总" /></p>

:ET