I"0<blockquote>
  <p>本系列将对动态规划进行讲解，分为上中下三部曲。
本篇将来详细说说什么叫做动态规划和标准解题步骤</p>
</blockquote>

<p><button></button></p>

<h4 id="何为动态规划">何为动态规划</h4>

<p>我们给出百度百科的解答：</p>

<p><img src="https://i.loli.net/2019/10/16/CDdYSbqfh74ViJz.png" alt="" /></p>

<p>此处有几个重要的要素：</p>

<ul>
  <li>最优子结构</li>
  <li>简称：DP</li>
</ul>

<p>下面我们依次讲解</p>

<h4 id="最优子结构">最优子结构</h4>

<p>动态规划的灵魂就是 <strong>将一个复杂结构转换为多个子结构，并找到最优的子结构</strong>，过程如下：</p>

<ul>
  <li>定义<code class="highlighter-rouge">“状态”</code></li>
  <li>找到<code class="highlighter-rouge">“状态转移方程”</code></li>
</ul>

<p>动态规划，顾名思义，它是一个 <code class="highlighter-rouge">动</code> 的过程，我们需要不断规划它的每一个状态</p>

<p>所以我们应该先找到 子结构的 的初始状态，再去找到状态更改的 状态转移方程</p>

<p>这时就需要利用一个表，来存取每个子结构的状态，即<strong>Dp表</strong></p>

<h4 id="demo">Demo</h4>

<p>以 LeetCode 第5题 <code class="highlighter-rouge">最长回文子串</code>为例：</p>

<p><img src="https://i.loli.net/2019/10/16/ZfacvAmjstyShFi.png" alt="" /></p>

<p>这道题，最容易想到是暴力递归，每一个组合都试一下，此处略去</p>

<p>其次是巧妙地<strong>中心扩散</strong>：</p>

<ul>
  <li>以 “babad” 为例，当索引 <code class="highlighter-rouge">i</code> 到了第三个字符的 b 时，以b为中心进行左右同时扩散</li>
  <li>然后比较 <code class="highlighter-rouge">i-1</code> <code class="highlighter-rouge">i+1</code> 这两个字符
    <ul>
      <li>相等则说明 <code class="highlighter-rouge">arr(i-1, i+1) </code>（表示索引i到j的字串） 范围内的串为回文，并继续向下比较；</li>
      <li>若不等，则说明不是回文，索引 i 向下继续比较</li>
    </ul>
  </li>
</ul>

<p>我们要使用的<strong>动态规划</strong>原理和中心扩散类似，不过是中心扩散原理的<strong>逆过程</strong>：</p>

<ul>
  <li>
    <p>若想知道 <code class="highlighter-rouge">string(i, j)</code> 是否为回文，那么我们需要知道 <code class="highlighter-rouge">string(i+1, j-1)</code> 是否为回文，依次比较</p>
  </li>
  <li>
    <p>那么，<strong>状态</strong>我们就得出来了，<code class="highlighter-rouge">arr[i ,j]</code> 的意义为，字串索引 i 到 j 是否为回文，用bool类型表示，0代表不是，1 为是</p>
  </li>
  <li>
    <p>所以，我们就可以得到一个表，即一个二维数组，我们把它叫做 <strong>dp表</strong></p>
  </li>
  <li>
    <p>状态我们已得出，那么状态转移呢？</p>
  </li>
  <li>
    <p>我们知道了 <code class="highlighter-rouge">dp[i, j]</code> 的状态由 <code class="highlighter-rouge">dp[ i+1, j-1]</code> 决定，所以，可以理解为  <code class="highlighter-rouge">dp[i+1, j-1]</code>  转移到  <code class="highlighter-rouge">dp[i, j]</code></p>
  </li>
  <li>
    <p>那么，确定  <code class="highlighter-rouge">arr[i, j]</code>  是回文 只需要  <code class="highlighter-rouge">dp[i+1, j-1] == 1</code>一个条件么？</p>

    <ul>
      <li>
        <p>答案显然是否定的，我们还需要 i 所在的字符 <strong>等于</strong> j 所在的字符， 这样才能继续向下推进</p>
      </li>
      <li>
        <p>i+1,j-1总会有一个界限的</p>

        <blockquote>
          <p>1、当原字符串的元素个数为 3 个的时候，如果左右边界相等，那么去掉它们以后，只剩下 1 个字符，它一定是回文串，故原字符串也一定是回文串；</p>

          <p>2、当原字符串的元素个数为 2 个的时候，如果左右边界相等，那么去掉它们以后，只剩下 0 个字符，显然原字符串也一定是回文串。</p>
        </blockquote>

        <p>把上面两点归纳一下，只要 s[l + 1, r - 1] 至少包含两个元素，就有必要继续做判断，否则直接根据左右边界是否相等就能得到原字符串的回文性。而“s[l + 1, r - 1] 至少包含两个元素”等价于 l + 1 &lt; r - 1，整理得 l - r &lt; -2，或者 r - l &gt; 2。</p>
      </li>
    </ul>
  </li>
  <li>
    <p>综上所述，动态转移方程为：<code class="highlighter-rouge">dp[l, r] = (string[l] == string[r] and (r - l &lt;= 2 or dp[l + 1, r - 1]))</code></p>
  </li>
</ul>

<h4 id="代码实现java版本">代码实现（Java版本）</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">//动态规划版本</span>
        <span class="nc">String</span> <span class="n">string</span> <span class="o">=</span> <span class="s">"ac"</span><span class="o">;</span>

        <span class="nc">String</span> <span class="n">big</span> <span class="o">=</span> <span class="n">palind</span><span class="o">(</span><span class="n">string</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">big</span><span class="o">);</span>

    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">palind</span><span class="o">(</span><span class="nc">String</span> <span class="n">string</span><span class="o">)</span> <span class="o">{</span>

        <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">string</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>

        <span class="c1">//判断字符串是否为空</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">length</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
            <span class="k">return</span> <span class="s">""</span><span class="o">;</span>

        <span class="c1">//长度为 1去，返回本身</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">length</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span>
            <span class="k">return</span> <span class="n">string</span><span class="o">;</span>

        <span class="c1">// 最大回文串（默认为 字符串的第一个，防止只有一个字符的情况）</span>
        <span class="nc">String</span> <span class="n">maxString</span> <span class="o">=</span> <span class="n">string</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">);</span>

        <span class="c1">//dp表  默认为 0</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">dp</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">length</span><span class="o">][</span><span class="n">length</span><span class="o">];</span>

        <span class="c1">//因为 dp表中每个元素需要依托于左下角元素，所以，我们应从 right 循环，内循环是 left</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">right</span> <span class="o">&lt;</span> <span class="n">length</span><span class="o">;</span> <span class="n">right</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">//使 left&lt;right ，可避免元素 left 和 right 指针重合的情况</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="o">;</span> <span class="n">left</span><span class="o">++)</span> <span class="o">{</span>
                <span class="cm">/**
                 * 检验 left 和 right 对应 char 是否相等
                 * 相等时 left和right有两种，一种是 right-left &lt;= 1 即此时 right 和left 紧邻或				  者 right==left（不考虑此情况）
                 * 当不上上述情况时，那么就要 满足
                 */</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">string</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">left</span><span class="o">)</span> <span class="o">==</span> <span class="n">string</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">right</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span> <span class="o">(</span><span class="n">right</span><span class="o">-</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="o">)</span> <span class="o">||</span> <span class="n">dp</span><span class="o">[</span><span class="n">left</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="n">right</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">))</span> <span class="o">{</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"left="</span> <span class="o">+</span> <span class="n">left</span> <span class="o">+</span> <span class="s">", right="</span> <span class="o">+</span> <span class="n">right</span><span class="o">);</span>
                    <span class="n">dp</span><span class="o">[</span><span class="n">left</span><span class="o">][</span><span class="n">right</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>

                    <span class="k">if</span> <span class="o">(</span> <span class="n">right</span> <span class="o">-</span> <span class="n">left</span> <span class="o">&gt;=</span> <span class="n">maxString</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="mi">1</span><span class="o">)</span>
                        <span class="n">maxString</span> <span class="o">=</span> <span class="n">string</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span> <span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">maxString</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<p><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/solution/zhong-xin-kuo-san-dong-tai-gui-hua-by-liweiwei1419/">参考地址</a></p>
:ET