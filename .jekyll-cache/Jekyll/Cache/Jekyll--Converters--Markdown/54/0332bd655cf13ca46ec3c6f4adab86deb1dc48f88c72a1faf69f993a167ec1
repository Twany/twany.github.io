I"M5<h2 id="题目概述">题目概述</h2>

<ul>
  <li>
    <p><strong>题号</strong>：<a href="https://leetcode-cn.com/problems/two-sum/">1. 两数之和</a></p>
  </li>
  <li>
    <p><strong>难度</strong>：简单</p>
  </li>
  <li>
    <p><strong>内容</strong>：</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。
  
你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。
  
示例:
  
给定 nums = [2, 7, 11, 15], target = 9
  
因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]
  
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<h2 id="第一次思路">第一次思路</h2>

<p>首先能够想到的就是<strong>暴力法</strong>，即用 <code class="highlighter-rouge">target</code>减去 数组 <code class="highlighter-rouge">nums</code> 的的第一个，差<code class="highlighter-rouge">temp</code> 和 <code class="highlighter-rouge">nums</code> 依次比较，遇到相等的就是返回，这就是我们要寻找的数。不等，继续循环至查询完毕。</p>

<h4 id="code">Code</h4>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="rouge-code"><pre><span class="kt">void</span> <span class="nf">sums</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">target</span><span class="p">)</span>
<span class="p">{</span>
	<span class="c1">// 置空判断</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="c1">//return false;</span>
	<span class="p">}</span>

	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">target</span><span class="p">)</span>
		<span class="p">{</span>	
			<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span><span class="p">)</span>
				<span class="p">{</span>

					<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">i</span><span class="p">;</span>
					<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">j</span><span class="p">;</span>
				<span class="p">}</span>

			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>

<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>上述代码，我添加了一个 if 判断：如果 <code class="highlighter-rouge">nums[i] &lt; target</code> 就不执行for循环，可是我忘记了负数的情况，如果 ：<code class="highlighter-rouge">nums = [-1, -2, -3, -5], target = -8</code>，那么这个 if 判断就会使得所有的 item 都不进行判断，error ！</p>

<p>所以，应该将 if 判断删去</p>

<h2 id="测试-submit">测试 Submit</h2>

<p><img src="https://i.loli.net/2019/11/10/d15wbzyxaBUAf28.png" alt="" /></p>

<p>简直是  low 到爆的方法</p>

<h2 id="分析">分析</h2>

<p>上述解法的本质是：**target - nums[ i ] = temp，然后查询 nums 数组剩下的元素是否有等于 temp **</p>

<p>那么，问题就变成了：<strong>在一个数组中查找指定元素 效率怎样才能最高？</strong></p>

<h2 id="改进">改进</h2>

<p>这就要引入 <code class="highlighter-rouge">unordered_map</code>，<strong>哈希表</strong>，一种查找速度极快的数据结构，元素混序且不可重复</p>

<p>（ <code class="highlighter-rouge">map</code> 的特点是有序性，适用于有顺序要求的问题，查找速度略慢于 <code class="highlighter-rouge">unordered_map</code>）</p>

<h4 id="改进code">改进Code</h4>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="rouge-code"><pre><span class="kt">void</span> <span class="nf">hashSum</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">target</span><span class="p">)</span>
<span class="p">{</span>
	<span class="c1">// 哈希表</span>
	<span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">hash</span><span class="p">;</span>

	<span class="c1">//返回vector</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">res</span><span class="p">;</span>

    <span class="c1">//填充hash</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">hash</span><span class="p">[</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">target</span> <span class="o">-</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">hash</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">hash</span><span class="p">[</span><span class="n">temp</span><span class="p">]</span> <span class="o">!=</span> <span class="n">i</span><span class="p">)</span> <span class="c1">//count()方法：返回查找元素的个数（非0即1）</span>
		<span class="p">{</span>
			<span class="n">res</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
			<span class="n">res</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">hash</span><span class="p">[</span><span class="n">temp</span><span class="p">]);</span>
			
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="n">hash</span><span class="p">[</span><span class="n">temp</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="改进-submit">改进 Submit</h2>

<p><img src="https://i.loli.net/2019/11/10/UZXTrc2O9HRpqKB.png" alt="" /></p>

<h2 id="收获总结">收获总结</h2>

<p>这次没有考虑到的是负数的情况，以致于进行了错误的 if 判断。考虑的还是不够全面。</p>

<p>因为是再一次使用 <code class="highlighter-rouge">C++</code> 去敲，之前的一些语法忘了大部分，这里特此总结：</p>

<ul>
  <li>
    <p>方法在使用前必须进行声明：</p>

    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="c1">//函数声明</span>
<span class="kt">void</span> <span class="nf">sums</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
  
<span class="kt">void</span> <span class="nf">sums</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">//具体实现部分</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>
    <p><code class="highlighter-rouge">vector</code> 用法</p>

    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">;</span>	<span class="c1">//声明</span>
<span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>	<span class="c1">//添加元素</span>
<span class="n">v</span><span class="p">.</span><span class="n">pop_back</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>	<span class="c1">//删除元素</span>
<span class="n">v</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>			<span class="c1">//取元素</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>
    <p><code class="highlighter-rouge">unordered_map</code> 用法</p>

    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">hash</span><span class="p">;</span> <span class="c1">//定义</span>
<span class="n">hash</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>	<span class="c1">//赋值</span>
<span class="n">hash</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>	<span class="c1">//查询是否存在temp这个key 结果非0即1（因为unordered_map内元素不能重复）</span>
<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">hash</span><span class="p">[</span><span class="n">temp</span><span class="p">];</span>	<span class="c1">//取得key=temp的对应值value</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

:ET